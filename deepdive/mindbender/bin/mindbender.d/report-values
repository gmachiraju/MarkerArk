#!/usr/bin/env node
(function() {
  var args, err, fs, i, jsonFile, key, keyValuePairs, kv, obj, value, _i, _len, _ref, _ref1, _ref2;

  fs = require("fs");

  jsonFile = (_ref = process.env.JSON_FILE) != null ? _ref : "report.json";

  args = process.argv.slice(2);

  obj = jsonFile === "-" ? {} : (_ref1 = ((function() {
    try {
      return JSON.parse(fs.readFileSync(jsonFile));
    } catch (_error) {}
  })())) != null ? _ref1 : {};

  keyValuePairs = (function() {
    var _i, _j, _len, _ref2, _results, _results1;
    if (args[0] === "--alternating") {
      args.shift();
      _results = [];
      for (i = _i = 0, _ref2 = args.length; _i < _ref2; i = _i += 2) {
        key = args[i];
        value = args[i + 1];
        _results.push([key, value]);
      }
      return _results;
    } else {
      _results1 = [];
      for (_j = 0, _len = args.length; _j < _len; _j++) {
        kv = args[_j];
        key = kv.split("=", 1)[0];
        value = kv.substring(key.length + 1);
        _results1.push([key, value]);
      }
      return _results1;
    }
  })();

  for (_i = 0, _len = keyValuePairs.length; _i < _len; _i++) {
    _ref2 = keyValuePairs[_i], key = _ref2[0], value = _ref2[1];
    obj[key] = (function() {
      try {
        return JSON.parse(value);
      } catch (_error) {
        err = _error;
        return value;
      }
    })();
  }

  if (jsonFile === "-") {
    console.log(JSON.stringify(obj));
  } else {
    fs.writeFileSync(jsonFile, JSON.stringify(obj));
  }

}).call(this);
