#!/usr/bin/env bash
# db-assign_sequential_id -- Assigns a unique integer to every row for a table using PostgreSQL sequence generator
# > eval "$(db-parse "$url")"
# > db-assign_sequential_id TABLE COLUMN BEGIN_ID [INCREMENT]
##
set -euo pipefail

[[ $# -gt 0 ]] || usage "$0" "Missing TABLE"
[[ $# -gt 1 ]] || usage "$0" "Missing COLUMN"
[[ $# -gt 2 ]] || usage "$0" "Missing BEGIN_ID"
Table=$1 Column=$2 BeginId=$3 Increment=${4:-1}

[[ $Increment -ne 0 ]] || usage "$0" "INCREMENT must be non-zero"

# Use Greenplum PL/pgSQL and PL/Python UDFs to assign IDs fast
# See: http://www.postgresql.org/docs/8.2/static/sql-createlanguage.html
# See: http://www.postgresql.org/docs/8.2/static/plpgsql-overview.html
# See: http://www.postgresql.org/docs/8.2/static/plpython-funcs.html
if db-supports_pg_lang "plpgsql" && db-supports_pg_lang "plpythonu"; then
    db-execute "
    CREATE OR REPLACE FUNCTION fast_seqassign_init()
    RETURNS INT AS \$\$
      if 'cur_id' in SD:
        SD.pop('cur_id')
      return 0
    \$\$ LANGUAGE plpythonu;

    CREATE OR REPLACE FUNCTION fast_seqassign_next(startid BIGINT, increment BIGINT, this_gpsid INT, gpsids INT[], cumulative_cnts BIGINT[], cnts BIGINT[])
    RETURNS BIGINT AS \$\$
      if 'cur_id' not in SD:
        for gpsid, cumulative_cnt, cnt in zip(gpsids, cumulative_cnts, cnts):
          if gpsid == this_gpsid:
            # find the id range using the cumulative count and the size of this segment
            SD['cur_id'] = startid + increment * (cumulative_cnt - cnt)
            SD['end_id'] = startid + increment *  cumulative_cnt
            break
        if 'cur_id' not in SD:
          # XXX no segment was found
          plpy.fatal('No non-empty id range was assigned for segment %s in the initial partition' % str(this_gpsid))
      # generate fresh id as long as it's within the assigned range
      id = SD['cur_id']
      if id != SD['end_id']:
        SD['cur_id'] += increment
        return id
      else:
        plpy.fatal('Insufficient id range was assigned for segment %s' % str(this_gpsid))
    \$\$ LANGUAGE plpythonu;

    CREATE OR REPLACE FUNCTION fast_seqassign(tname CHARACTER VARYING, cname CHARACTER VARYING, startid BIGINT, increment BIGINT)
    RETURNS TEXT AS \$\$
    BEGIN
      EXECUTE 'CREATE TEMPORARY VIEW dd_tmp_id_ranges_by_gpsid AS
               SELECT gpsid
                    , cnt
                    , SUM(cnt) OVER (ORDER BY gpsid) AS cumulative_cnt
                 FROM (
                    SELECT gp_segment_id AS gpsid
                         , COUNT(1)      AS cnt
                      FROM ' || QUOTE_IDENT(tname) || '
                     GROUP BY gpsid
                     ORDER BY gpsid
                 ) histogram;';
      DECLARE
        gpsids          INT[]    := ARRAY(SELECT gpsid          FROM dd_tmp_id_ranges_by_gpsid ORDER BY gpsid);
        cumulative_cnts BIGINT[] := ARRAY(SELECT cumulative_cnt FROM dd_tmp_id_ranges_by_gpsid ORDER BY gpsid);
        cnts            BIGINT[] := ARRAY(SELECT cnt            FROM dd_tmp_id_ranges_by_gpsid ORDER BY gpsid);
        update_query    TEXT;
      BEGIN
        EXECUTE 'SELECT fast_seqassign_init();';
        update_query := 'UPDATE ' || tname || ' SET ' || cname || ' = fast_seqassign_next(
            ' || startid || ',
            ' || increment || ',
            gp_segment_id,
            ARRAY[' || ARRAY_TO_STRING(         gpsids, ',')::TEXT || '],
            ARRAY[' || ARRAY_TO_STRING(cumulative_cnts, ',')::TEXT || '],
            ARRAY[' || ARRAY_TO_STRING(           cnts, ',')::TEXT || ']
          );';
        IF update_query::TEXT IS NOT NULL THEN
          -- update_query IS NULL for empty tables, hence this guard is necessary
          EXECUTE update_query;
        END IF;
        RETURN 'fast_seqassign done for segments [' || ARRAY_TO_STRING(gpsids, ',') || ']' ||
               ' with counts [' || ARRAY_TO_STRING(cnts, ',') || ']';
      END;
    END;
    \$\$ LANGUAGE 'plpgsql';

    SELECT fast_seqassign('$Table', '$Column', $BeginId, $Increment);
"

else # if either plpgsql or plpythonu is not available
# Fall back to using PostgreSQL sequence generator named after the table and column
# See: http://www.postgresql.org/docs/current/static/sql-createsequence.html
seq="dd_seq_${Table}_${Column}"
minMaxValues=
if   [[ $Increment -gt 0 && $BeginId -le 0 ]]; then minMaxValues="MINVALUE $BeginId NO MAXVALUE"
elif [[ $Increment -lt 0 && $BeginId -ge 0 ]]; then minMaxValues="NO MINVALUE MAXVALUE $BeginId"
fi
db-execute "
    DROP SEQUENCE IF EXISTS $seq CASCADE;
    CREATE TEMPORARY SEQUENCE $seq INCREMENT BY $Increment $minMaxValues START $BeginId NO CYCLE;

    UPDATE $Table SET $Column = nextval('$seq');
"
fi
