#!/usr/bin/env bash
# build-in-container -- Builds changes made from host inside Docker container with the master image
# $ build-in-container
#
# It is possible to run the build on a specific Docker image:
# $ build-in-container DOCKER_IMAGE_MASTER
#
# Also, make targets and flags can be specified as well:
# $ build-in-container DOCKER_IMAGE_MASTER MAKE_TARGET...
##
set -euo pipefail
. "$(dirname "$0")"/DockerBuild.bash

# Use git to figure out identifiers
wipTag=; [[ $(git status --porcelain | wc -l) -eq 0 ]] || wipTag="WIP-"
wipDetails=$(git status --porcelain --branch | sed 's/^/    # /')
commitFull=$(cd "$DOCKER_HOST_PATH" && git rev-parse HEAD)
COMMIT="$wipTag${commitFull:0:7}"
escapedDockerHostMountpoint=$(@sh "$DOCKER_HOST_MOUNTPOINT")
DOCKER_CONTAINER+=".$COMMIT.$$"

# Make sure the git repo wasn't cloned using `git clone --reference`
! [[ -s "$DOCKER_HOST_PATH"/.git/objects/info/alternates ]] ||
    error '# Git repository cloned with `git clone --reference` is not supported' \
          '# as git inside container cannot access the alternate repos on the host' \
          '# Please run these commands to dissociate your git repo first:' \
          "cd $(printf %q "$DOCKER_HOST_PATH")" \
          'git repack -a -d' \
          'mv -fv .git/objects/info/alternates{,~}' \
          # See: http://stackoverflow.com/a/29081268/390044

# default build command
buildCommand=$DOCKER_BUILD_COMMAND
[[ $# -eq 0 ]] || buildCommand=$(@sh "$@")

# prepare a script that patches (staged and unstaged) changes in the source tree since last commit (including all submodule)
patchCommands=$(
    cd "$DOCKER_HOST_PATH"
    producePatch="git diff --minimal --ignore-submodules=all HEAD"
    escapePatch='sed "s/'\''/'\'\\\\\\\\\'\''/g"' # XXX a black magic for properly embedding patches in the script
    # produce patch instruction for the source tree
    if [[ $($producePatch | wc -l) -gt 0 ]]; then
        echo ': patching uncommitted changes'
        { echo "    git apply <<<'"; eval $producePatch | eval $escapePatch; echo "'"; }
    fi
    # produce patch instruction for every submodule
    git submodule --quiet foreach --recursive bash -c '
        if [[ $('"$producePatch"' | wc -l) -gt 0 ]]; then
            submodule=$(printf %q "${PWD#$1/}")
            echo "    : patching uncommitted changes in $submodule"
            echo "    ( cd $submodule"
            { echo "    git apply <<<'\''"; '"$producePatch | $escapePatch"'; echo "'\''"; }
            echo "    )"
        fi
    ' -- "$PWD"
)

(
trap 'docker rm -f "$DOCKER_CONTAINER"' EXIT
set -x
docker-run --name "$DOCKER_CONTAINER" \
    -- "$DOCKER_IMAGE_MASTER" bash -c '# build COMMIT='"$wipTag$commitFull"'
'"$wipDetails"'
    export PS4="+('"$DOCKER_CONTAINER"') "; set -eux

    : importing changes from host via git
    ! [[ -s '"$escapedDockerHostMountpoint"'/.git/shallow ]] || # need to cope with shallow repos
        git fetch --force --update-head-ok --prune --no-recurse-submodules
    git fetch --force --update-head-ok --prune --no-recurse-submodules '"$escapedDockerHostMountpoint"'
    git submodule foreach sh -c '\''git fetch "$1/${PWD#$2/}"'\'' -- '"$escapedDockerHostMountpoint"' "$PWD"
    : syncing the container working directory with host
    git checkout --force FETCH_HEAD
    git clean -d --force
    git submodule update --init --recursive --force
    '"$patchCommands"'

    '"$buildCommand"'
    '

docker commit "$DOCKER_CONTAINER" "$DOCKER_IMAGE"
)

echo '# Docker image '"$DOCKER_IMAGE"' has been updated to this build.'
echo '# Use `inspect-build` to open a shell or run commands in this build.'
echo '# Use `test-in-container` to run tests against this build.'
echo '# Use `update-master-image` to start subsequent builds on top of this.'
